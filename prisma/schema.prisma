generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  Principal
  Teacher
  Student
}

enum AttendanceType {
  Student
  Teacher
}

enum AttendanceStatus {
  Present
  Absent
  Late
}

enum Subject {
  Math
  Science
  English
  Hindi
  SocialStudies
  Sanskrit
  PhysicalEducation
}

enum Gender {
  Male
  Female
}

enum Section {
  A
  B
}

model User {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String         @unique
  gender          Gender?
  bloodGroup      String?
  address         String?
  detail          String?
  password        String
  phone           String
  role            Role
  assignedClasses String[] // List of `Class` IDs for Teachers
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  studentClasses  StudentClass[] @relation("UserStudentClasses")
}

model Class {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  class              String
  classStrength      Int
  section            Section
  students           StudentClass[]
  teacherAssignments TeacherAssignment[]
}

model StudentClass {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  student   User   @relation("UserStudentClasses", fields: [studentId], references: [id])
  studentId String @db.ObjectId
  class     Class  @relation(fields: [classId], references: [id])
  classId   String @db.ObjectId
}

model TeacherAssignment {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  teacherId String     @db.ObjectId
  subject   Subject // Enum for subjects
  schedules Schedule[] @relation("TeacherAssignmentSchedules")
  Class     Class?     @relation(fields: [classId], references: [id])
  classId   String?    @db.ObjectId
}

model Schedule {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  day                 String // e.g., "Monday", "Tuesday"
  startTime           String // e.g., "10:00 AM"
  endTime             String // e.g., "11:00 AM"
  teacherAssignment   TeacherAssignment @relation("TeacherAssignmentSchedules", fields: [teacherAssignmentId], references: [id])
  teacherAssignmentId String            @db.ObjectId
}

model Attendance {
  id      String            @id @default(auto()) @map("_id") @db.ObjectId
  date    DateTime
  classId String            @db.ObjectId
  type    AttendanceType
  entries AttendanceEntry[]
}

model AttendanceEntry {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  userId       String           @db.ObjectId
  status       AttendanceStatus
  Attendance   Attendance?      @relation(fields: [attendanceId], references: [id])
  attendanceId String?          @db.ObjectId
}

model Exam {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  classId      String   @db.ObjectId
  subject      Subject
  date         DateTime
  startTime    String
  endTime      String
  invigilators String[] // List of `User` IDs for Teachers
}
